import groovy.json.JsonOutput
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.1'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.10'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.5.0'
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.2'
    id 'net.saliman.cobertura' version '2.2.8'
    id 'com.github.kt3k.coveralls' version '2.3.1'
    id 'com.github.ksoichiro.console.reporter' version '0.3.1'
}

apply plugin: 'groovy'
apply plugin: 'com.moowork.node'
apply plugin: 'idea'
apply plugin: 'build-time-tracker'

group = GROUP
version = VERSION_NAME
archivesBaseName = POM_ARTIFACT_ID

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Thanks to a workaround in https://issues.gradle.org/browse/GRADLE-1715,
    // using additional build script to exclude Rhino that is bundled with Gradle distribution,
    // we can avoid the error that occurs when executing Trireme on tests:
    // java.lang.NoSuchMethodError: org.mozilla.javascript.ScriptRuntime.setObjectProp
    // Gradle distribution has an older Rhino (1.7R3) and causing conflict.
    // In 1.7R3, ScriptRuntime does not have setObjectProp() method, which causes the above error.
    compile new GradleDist(project, GRADLE_VERSION).asFileTree
    compile localGroovy()
    compile 'io.apigee.trireme:trireme-jar:0.8.8'
    compile 'org.fusesource.jansi:jansi:1.11'
    testCompile ('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

node {
    version = '0.12.7'
    npmVersion = '3.3.9'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = project.buildDir
}

idea {
    module {
        excludeDirs += [
            file('src/main/resources/node_modules'),
        ]
    }
}

test {
    maxParallelForks = 1
    if (System.env.CI) {
        maxHeapSize = '512m'
    }
    testLogging {
        events 'failed', 'passed', 'skipped', 'started', 'standard_out', 'standard_error'
    }
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = sourceSets.main.groovy.srcDirs
}

buildtimetracker {
    reporters {
        summary {
            ordered true
            threshold 50
            barstyle 'unicode'
        }
    }
}

task copyJavaScript << {
    def packageInfo = [
        "private": true,
        "devDependencies": [
            "bower": "1.7.6",
            "request": "2.53.0",
            "coffee-script": "1.10.0",
            "uglify-js": "2.3.6",
            "source-map": "0.4.4",
            "graceful-fs": "3.0.8",
            "inflight": "1.0.4",
            "inherits": "2.0.1",
            "ansi-regex": "2.0.0",
            "core-util-is": "1.0.1",
            "mime": "1.3.4",
            "osenv": "0.1.3",
            "less": "2.5.3",
            "q": "1.4.1",
            "glob": "4.5.3",
            "browserify": "12.0.1",
            "licensify": "2.2.0",
        ],
        "scripts": [
            "browserify": "browserify -p licensify --im --noparse=./node_modules/amdefine/amdefine.js --norparse=./node_modules/bower/lib/node_modules/amdefine/amdefine.js --noparse=./node_modules/bower/lib/node_modules/graceful-fs/fs.js --noparse=./node_modules/graceful-fs/fs.js --noparse=./node_modules/bower/lib/node_modules/fs-write-stream-atomic/index.js --noparse=./node_modules/bower/lib/lib/commands/help.js --noparse=./node_modules/bower/lib/lib/util/template.js --ignore=opn --node build.js -o scripts/build.tmp.js",
            "uglify": "uglifyjs scripts/build.tmp.js --comments -o scripts/build.js"
        ]
    ]
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        packageInfo.scripts.browserify = packageInfo.scripts.browserify.replaceAll('/', '\\\\')
        packageInfo.scripts.uglify = packageInfo.scripts.uglify.replaceAll('/', '\\\\')
    }
    project.file("${project.buildDir}/package.json").text = JsonOutput.prettyPrint(JsonOutput.toJson(packageInfo))

    copy {
        from "src/main/javascript"
        into project.buildDir
    }
    project.file("${project.buildDir}/scripts").mkdirs()
}

task applyPatch(dependsOn: 'npmInstall') << {
    // Resolving cache while installing dependency in bower fails when executing with Trireme,
    // so apply a patch for it
    File f = new File("${project.buildDir}/node_modules/bower/lib/lib/core/ResolveCache.js")
    def replaced = f.text.replaceAll(
        "if \\(err\\.code === 'ENOENT'\\) \\{",
        "if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {")
    f.text = replaced

    // When using browserify, bower's internal function commandFactory is not handled
    // because it uses require with variables.
    // To solve this problem, we pass module path directly to require().
    f = new File("${project.buildDir}/node_modules/bower/lib/lib/commands/index.js")
    replaced = f.text.replaceAll(/commandFactory\('([^']*)'\)/) { all, path ->
        "commandFactory(require('${path}'))"
    }.replaceAll("var command = require\\(id\\)", "var command = id")
    f.text = replaced

    // bower 1.7.6 includes git avialability check with `which` module,
    // but `which` doesn't work with node 0.12 on trireme.
    // So if we use bower 1.7.6 and node 0.12 included in trireme 0.8.8 together,
    // we must skip this check to execute bower.
    // I confirmed this behavior with a simple, small index.js:
    //   var which = require('which');
    //   try {
    //     which.sync('git');
    //     console.log('git is installed');
    //   } catch(ex) {
    //     console.log(ex);
    //   }
    // This produces different result in node 0.10 and 0.12:
    //   $ trireme --node-version=0.12 index.js
    //   { [Error: not found: git]
    //     message: 'not found: git',
    //     fileName: '/Users/dev/.nvm/v5.3.0/lib/node_modules/which/which.js',
    //     lineNumber: 120 }
    //   $ trireme --node-version=0.10 index.js
    //   git is installed
    //
    //f = new File("${projectDir}/src/main/resources/node_modules/bower/lib/lib/core/resolvers/GitResolver.js")
    //replaced = f.text.replaceAll(
    //    "hasGit = false;",
    //    "hasGit = true;")
    //f.text = replaced

    // Remove whitespace in uglifyjs
    // https://github.com/npm/npm/issues/1994
    f = new File("${project.buildDir}/node_modules/uglify-js/bin/uglifyjs")
    replaced = f.text.replaceAll("#! /usr/bin/env node", "#!/usr/bin/env node")
    f.text = replaced

    // Remove unused features for browserify to work
    f = new File("${project.buildDir}/node_modules/bower/lib/lib/version.js")
    replaced = f.text.replaceAll("module.exports = .*", "module.exports = '1.7.6';")
    f.text = replaced

    [
        'node_modules/bower/lib/node_modules/hawk/lib/utils.js',
        'node_modules/bower/lib/node_modules/tough-cookie/lib/cookie.js',
        'node_modules/elliptic/lib/elliptic.js',
        'node_modules/hawk/lib/utils.js',
        'node_modules/npm/node_modules/request/node_modules/hawk/lib/utils.js',
        'node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js',
        'node_modules/npm/scripts/publish-tag.js',
        'node_modules/tough-cookie/lib/cookie.js',
    ].each { String path ->
        f = new File("${project.buildDir}/${path}")
        replaced = f.text.replaceAll("require\\('../package.json'\\).version", "0")
        f.text = replaced
    }
}

task browserifyBuild(type: NpmTask, dependsOn: 'applyPatch') {
    args = ['run', 'browserify']
    execOverrides {
        it.workingDir = project.buildDir
    }
    doLast {
        if (!project.file("${project.buildDir}/scripts/build.tmp.js").exists()) {
            throw new GradleException("browserifyBuild failed")
        }
    }
}

task uglifyBuild(type: NpmTask, dependsOn: 'browserifyBuild') {
    args = ['run', 'uglify']
    execOverrides {
        it.workingDir = project.buildDir
    }
    doLast {
        if (!project.file("${project.buildDir}/scripts/build.js").exists()) {
            throw new GradleException("uglifyBuild failed")
        }
    }
}

task browserify(dependsOn: ['processResources', 'uglifyBuild']) << {
    def resDir = project.file("${project.buildDir}/resources/main")
    if (!resDir.exists()) {
        resDir.mkdirs()
    }
    copy {
        from "${project.buildDir}/scripts"
        into "${project.buildDir}/resources/main"
    }

    // UglifyJS reads external files on runtime.
    // To copy less files, we merge those files into 1 file on build time.
    File f = new File("${project.buildDir}/resources/main/uglifyjs-lib.js")
    f.text = ""
    [
        'utils.js',
        'ast.js',
        'parse.js',
        'transform.js',
        'scope.js',
        'output.js',
        'compress.js',
        'sourcemap.js',
        'mozilla-ast.js',
    ].each { String fileName ->
        f.text += new File("${project.buildDir}/node_modules/uglify-js/lib/${fileName}").text
    }
}

npmInstall.dependsOn('copyJavaScript')
classes.dependsOn('browserify')
check.dependsOn('cobertura')

apply from: "${rootDir}/gradle/release.gradle"
