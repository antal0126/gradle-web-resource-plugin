import groovy.json.*

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
        classpath 'com.moowork.gradle:gradle-node-plugin:0.10'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.5.0'
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.2"
    id 'net.saliman.cobertura' version '2.2.8'
    id 'com.github.kt3k.coveralls' version '2.3.1'
}

apply plugin: 'groovy'
apply plugin: 'com.moowork.node'
apply plugin: 'idea'
apply plugin: 'build-time-tracker'

group = GROUP
version = VERSION_NAME
archivesBaseName = POM_ARTIFACT_ID

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Thanks to a workaround in https://issues.gradle.org/browse/GRADLE-1715,
    // using additional build script to exclude Rhino that is bundled with Gradle distribution,
    // we can avoid the error that occurs when executing Trireme on tests:
    // java.lang.NoSuchMethodError: org.mozilla.javascript.ScriptRuntime.setObjectProp
    // Gradle distribution has an older Rhino (1.7R3) and causing conflict.
    // In 1.7R3, ScriptRuntime does not have setObjectProp() method, which causes the above error.
    compile new GradleDist(project, GRADLE_VERSION).asFileTree
    compile localGroovy()
    compile 'io.apigee.trireme:trireme-jar:0.8.8'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    testCompile ('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

node {
    version = '0.12.7'
    npmVersion = '3.3.9'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = project.buildDir
}

idea {
    module {
        excludeDirs += [
            file('src/main/resources/node_modules'),
        ]
    }
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = sourceSets.main.groovy.srcDirs
}

buildtimetracker {
    reporters {
        summary {
            ordered true
            threshold 50
            barstyle "unicode"
        }
    }
}

apply from: "${rootDir}/gradle/exclude.gradle"

task copyPackageInfo << {
    copy {
        from "src/main/javascript/package.json"
        into project.buildDir
    }
}

task copyNodeModules {
    inputs.dir file("${project.buildDir}/node_modules")
    outputs.dir file("${projectDir}/src/main/resources/node_modules")
    doLast {
        // Copy installed node modules to resources
        copy {
            from("${project.buildDir}/node_modules") {
                excludeModules.each { exclude it }
            }
            into "src/main/resources/node_modules"
        }

        // Delete unused files
        def baseDir = "${projectDir}/src/main/resources/node_modules"
        excludeModules.each { e ->
            if (0 <= e.indexOf('*')) {
                def tree = fileTree(dir: baseDir)
                tree.include(e)
                tree.each { File f ->
                    project.delete(f.absolutePath)
                }
            } else {
                project.delete("${baseDir}/${e}")
            }
        }

        // Modify local paths in package.json
        fileTree(dir: baseDir).include('**/package.json').each { File f ->
            def json = new JsonSlurper().parseText(f.text)
            json._args = []
            json._where = ''
            f.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        }

        // Apply patches:
        // Resolving cache while installing dependency in bower fails when executing with Trireme,
        // so apply a patch for it
        File f = new File("${projectDir}/src/main/resources/node_modules/bower/lib/core/ResolveCache.js")
        def replaced = f.text.replaceAll(
            "if \\(err\\.code === 'ENOENT'\\) \\{",
            "if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {")
        f.text = replaced
    }
}

task cleanNodeModules << {
    project.delete("src/main/resources/node_modules")
}

npmInstall.dependsOn('copyPackageInfo')
copyNodeModules.dependsOn('npmInstall')
compileGroovy.dependsOn('copyNodeModules')
clean.dependsOn('cleanNodeModules')

apply from: "${rootDir}/gradle/release.gradle"
